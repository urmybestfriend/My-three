for car turning physics later to make things more realistic/complicated:
https://physics.stackexchange.com/questions/182689/what-causes-a-cars-velocity-to-follow-the-front-wheels-direction
https://physics.stackexchange.com/questions/454887/the-dynamics-of-a-cornering-wheel

What I want to do is to program at least somewhat realistic turning for the car.
I thought to start with I could just rotate the car to match the rotation of the front wheels. this is tricky because
I'm having trouble figuring out how a car's body rotates when turning. it should be independent of the front wheels' rotation I think?

TODO:
 - fix the car rotation thing when turning. if you try turning the wheels from one side to another (i.e. keep alternating between
   A and D) after turning, the car's forward vector is stuck at an angle, which influences the forward movement. I think it has
   to do with the if condition I set up to determine whether the car should rotate to align with the front wheels. need to investigate
   further though.

 - fix lateral rotation. it kind of works but I still don't know what situations trigger the car to flip over, which happens sometimes.
   additionally, when you try to move the car along the big sloped turn, the lateral rotation usually looks pretty ok but then it looks
   as if the car got rotated about the Z axis where it's tipped forward at an angle. I think this has to do with the track having
   a bunch of segments such that the turns are very 'angular' and not smooth. so what might be level on one face is not on the next.

   objective: get car to be parallel with whatever plane it's on. sounds simple but it's so hard ;_;
   unity might help: https://answers.unity.com/questions/168097/orient-vehicle-to-ground-normal.html
                     https://www.google.com/search?biw=2133&bih=1076&ei=jIyfX9PlBJ-oytMP_u6SwA4&q=unity+get+car+to+be+parallel+with+curved+plane&oq=unity+get+car+to+be+parallel+with+curved+plane&gs_lcp=CgZwc3ktYWIQAzIFCCEQoAEyBQghEKABOgQIABBHOgUIIRCrAjoICCEQFhAdEB46BwghEAoQoAFQijVYy1RgxlVoA3ACeACAAWGIAZELkgECMjCYAQCgAQGqAQdnd3Mtd2l6yAEIwAEB&sclient=psy-ab&ved=0ahUKEwjT29GyhOPsAhUflHIEHX63BOgQ4dUDCA0&uact=5

   this too? https://github.com/mrdoob/three.js/issues/1486
   
   new strategy: try raycast down once, get the normal of the face the raycast hits. do something with that info?
                 you can definitely adjust the car's y position with that info so I don't need a separate function to adjust height.

   maybe: https://stackoverflow.com/questions/46336560/three-js-how-to-add-an-object-perpendicular-to-a-face-normal
          https://stackoverflow.com/questions/16268482/three-js-convert-face-normal-from-local-space-to-world-space
          https://stackoverflow.com/questions/23139442/how-to-get-correct-values-for-normals-in-threejs

   hmm this looks similar: https://stackoverflow.com/questions/23592427/rotate-an-object-according-to-a-plane-normal
   and this: https://answers.unity.com/questions/27340/rotating-an-object-to-equal-normals-of-object-belo.html

   ok, so now I can get a normal vector for each face of the racetrack that my raycast hits. great! and each normal vector looks like
   it's angled properly along the sloped parts of the track. now what I would like to happen is have the car rotate itself about
   the x-axis so that it's angled just like the normal for the face below it (i.e. the local y-axis of the car should be parallel
   to the normal)
   this is helpful! https://stackoverflow.com/questions/9038465/three-js-object3d-cylinder-rotation-to-align-to-a-vector

   cool, using thePlayer.quaternion.setFromUnitVectors seems to get the car to align with the normal vector of the surface it's on.
   but now a new problem - this rotation alignment causes issues with movement; it's forcing the car to face a certain way based 
   on the normal vector.

   ok I'm very dumb lol. I ended up where I was like a couple days ago. I'm pretty sure the initial idea with getting the lateral rotation
   is fine (I just changed what I had to use quaternions lol) and is working - the 'tilting' forward of the car is due to the angled
   segments of the track and the fact that I'm only checking the angle of the car and the surface it's on in the middle of the car mesh.
   I think I should try adding a marker above the front and rear wheels? but then more rotations if the front wheels should be higher
   than the rear wheels ughhhhhhhhhhhhhhhhhh ;_;. I just need to get the car more leveled about the z-axis (check z-axis rotations?).

   -----
   so it turns out it's pretty easy. just add a couple more height markers (one for the front and one for the rear of the car), just like
   what you do for the lateral rotation. and solve the problem the same way, except you're dealing with vectors that go along the x-axis.
   yay! :) the result looks pretty good.

   all that's left is to try to figure out how to get my rotations with the car and the front wheels (which rotate separately)
   when turning lined up properly.

   other/maybe helpful:
        https://stackoverflow.com/questions/25199173/how-to-find-rotation-matrix-between-two-vectors-in-three-js
	https://stackoverflow.com/questions/52977759/three-js-how-to-find-out-xyz-rotations-between-two-vectors
        https://stackoverflow.com/questions/43606135/split-quaternion-into-axis-rotations

   for turning the car:
   https://asawicki.info/Mirror/Car%20Physics%20for%20Games/Car%20Physics%20for%20Games.html